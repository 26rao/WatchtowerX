openapi: 3.0.0
info:
  title: WatchtowerX Events API
  version: 1.0.0

paths:
  /api/event:
    post:
      summary: Create a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventType
                - timestamp
                - cameraId
                - confidence
                - priorityLabel
                - snapshotData
              properties:
                eventType:
                  type: string
                  enum: [fire, fall, fight]
                timestamp:
                  type: string
                  format: date-time
                cameraId:
                  type: string
                confidence:
                  type: number
                  minimum: 0
                  maximum: 1
                priorityLabel:
                  type: string
                  enum: [Low, Medium, High]
                snapshotData:
                  type: string
                  description: Base64 data URI
                eventDetails:
                  type: object
                  properties:
                    description:
                      type: string
                      maxLength: 512
                location:
                  type: string
                severity:
                  type: string
                  enum: [low, medium, high]
                status:
                  type: string
                  enum: [pending, dispatched, resolved]
                notes:
                  type: string
                  maxLength: 512
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Validation error
        '500':
          description: Snapshot upload or internal error

  /api/events:
    get:
      summary: List events with filters, pagination, sorting
      parameters:
        - in: query; name: type; schema: { type: string, enum: [fire, fall, fight] }
        - in: query; name: priority; schema: { type: integer, minimum: 1, maximum: 3 }
        - in: query; name: cameraId; schema: { type: string }
        - in: query; name: startDate; schema: { type: string, format: date-time }
        - in: query; name: endDate; schema: { type: string, format: date-time }
        - in: query; name: limit; schema: { type: integer }
        - in: query; name: page; schema: { type: integer }
        - in: query; name: sort; schema: { type: string }
        - in: query; name: order; schema: { type: string, enum: [asc, desc] }
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:  { type: integer }
                  limit: { type: integer }
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
    delete:
      summary: Bulk delete events older than a timestamp
      parameters:
        - in: query; name: olderThan; required: true; schema: { type: string, format: date-time }
      responses:
        '200':
          description: Deletion result
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedCount: { type: integer }
        '400': { description: Missing or invalid query param }

  /api/events/export:
    get:
      summary: Export all events as CSV
      responses:
        '200':
          description: CSV export
          content:
            text/csv:
              schema: { type: string, format: binary }

  /api/events/export.json:
    get:
      summary: Export all events as JSON
      responses:
        '200':
          description: JSON export
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

components:
  schemas:
    Event:
      type: object
      properties:
        eventId:       { type: string }
        eventType:     { type: string, enum: [fire, fall, fight] }
        timestamp:     { type: string, format: date-time }
        cameraId:      { type: string }
        confidence:    { type: number, format: float }
        priority:      { type: integer }
        priorityLabel: { type: string, enum: [Low, Medium, High] }
        location:      { type: string }
        severity:      { type: string, enum: [low, medium, high] }
        status:        { type: string, enum: [pending, dispatched, resolved] }
        notes:         { type: string }
        snapshotUrl:   { type: string, nullable: true }
